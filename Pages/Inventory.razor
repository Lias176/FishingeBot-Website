@page "/inventory"
@page "/inventory/{user}"
@using FireSharp.Response
@using System.Text.Json
@inject NavigationManager NavigationManager

<PageTitle>Inventory</PageTitle>

@if(User == null) {
    <a>Select a user:</a>
    <select @onchange="viewInventory">
        <option></option>
        @if(users != null) {
            @foreach(string username in users.Keys) {
                <option>@username</option>
            }
        }
    </select>
} else {
    @if(isInitialized) {
        <PageTitle>@(User + "s Inventory")</PageTitle>
        @if(userInventory == null || userInventory.itemStacks == null) {
            <a>This user does not have any items</a>
        } else {
            <table>
                <tr class="tableHeading">
                    <td>Item</td>
                    <td>Count</td>
                </tr>
                @foreach(ItemStack itemStack in userInventory.itemStacks)
                {
                    <tr>
                        <td>@itemStack.name</td>
                        <td>@itemStack.count</td>
                    </tr>
                }
            </table>
        }
    } else {
        <a>Loading...</a>
    }
}

<style>
    td {
        border: 1px solid black;
        padding: 5px;
    }

    .tableHeading {
        font-weight: bold;
    }
</style>

@code {
    [Parameter]
    public string? User { get; set; }

    private Dictionary<string, UserInventory>? users;
    private UserInventory? userInventory;

    private bool isInitialized = false;

    protected override async Task OnInitializedAsync()
    {
        if(User == null) {
            FirebaseResponse response = await Database.client.GetAsync("");
            users = JsonSerializer.Deserialize<Dictionary<string, UserInventory>>(response.Body);
        } else {
            FirebaseResponse response = await Database.client.GetAsync(User);
            try {
                userInventory = JsonSerializer.Deserialize<UserInventory>(response.Body);
            } catch { }
        }

        isInitialized = true;
    }

    private void viewInventory(ChangeEventArgs e) {
        if(e.Value == null) {
            return;
        }
        if(string.IsNullOrWhiteSpace(e.Value.ToString())) {
            return;
        }

        NavigationManager.NavigateTo("/inventory/" + e.Value.ToString(), true);
    }

    public class UserInventory {
        public List<ItemStack>? itemStacks { get; set; }
    }

    public class ItemStack {
        public string? name { get; set; }
        public int count { get; set; }
    }
}



